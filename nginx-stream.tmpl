{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

stream {

	{{ define "upstream" }}
		{{ if .Address }}
			{{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
			{{ if and .Container.Node.ID .Address.HostPort }}
				# {{ .Container.Node.Name }}/{{ .Container.Name }}
				server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
			{{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
			{{ else if .Network }}
				# {{ .Container.Name }}
				server {{ .Network.IP }}:{{ .Address.Port }};
			{{ end }}
		{{ else if .Network }}
			# {{ .Container.Name }}
			{{ if .Network.IP }}
				server {{ .Network.IP }} down;
			{{ else }}
				server 127.0.0.1 down;
			{{ end }}
		{{ end }}

	{{ end }}



	{{ range $name, $containers := groupByMulti $ "Env.VIRTUAL_STREAM" "," }}

	{{ $name := trim $name }}
	{{ $is_regexp := hasPrefix "~" $name }}
	{{ $upstream_name := when $is_regexp (sha1 $name) $name }}

	# {{ $name }}
	upstream {{ $upstream_name }} {

	{{ range $container := $containers }}
		{{ $addrLen := len $container.Addresses }}

		{{ range $knownNetwork := $CurrentContainer.Networks }}
			{{ range $containerNetwork := $container.Networks }}
				{{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
					## Can be connected with "{{ $containerNetwork.Name }}" network

					{{/* If only 1 port exposed, use that */}}
					{{ if eq $addrLen 1 }}
						{{ $address := index $container.Addresses 0 }}
						{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
					{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
					{{ else }}
						{{ $port := coalesce $container.Env.VIRTUAL_STREAM_PORT "80" }}
						{{ $address := where $container.Addresses "Port" $port | first }}
						{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
					{{ end }}
				{{ else }}
					# Cannot connect to network of this container
					server 127.0.0.1 down;
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
	}

	{{ $external_port := or ($.Env.VIRTUAL_STREAM_EXPOSE_PORT) "80" }}
	{{ $external_port := trim $external_port }}

	{{ $enable_ipv6 := eq (or ($.Env.ENABLE_IPV6) "") "true" }}

	server {
		listen {{ $external_port }};
		{{ if $enable_ipv6 }}
		listen [::]:{{ $external_port }};
		{{ end }}

		proxy_pass {{ $upstream_name }}
	}
}

{{ end }}
